(window.webpackJsonp=window.webpackJsonp||[]).push([[3],{400:function(s,t,a){s.exports=a.p+"assets/img/numTypy.84ff56d8.jpg"},401:function(s,t,a){s.exports=a.p+"assets/img/tc.9b282490.jpg"},402:function(s,t,a){s.exports=a.p+"assets/img/1647351396.754c434d.jpg"},403:function(s,t,a){s.exports=a.p+"assets/img/1647351352.a5bb3dcc.jpg"},404:function(s,t,a){s.exports=a.p+"assets/img/sb.74ef7743.jpg"},405:function(s,t,a){s.exports=a.p+"assets/img/sby1.2a273262.jpg"},406:function(s,t,a){s.exports=a.p+"assets/img/sby2.4f44e195.jpg"},407:function(s,t,a){s.exports=a.p+"assets/img/sby3.b98a0da3.jpg"},408:function(s,t,a){s.exports=a.p+"assets/img/sby4.23f6dca4.jpg"},409:function(s,t,a){s.exports=a.p+"assets/img/sby5.1f6de32f.jpg"},410:function(s,t,a){s.exports=a.p+"assets/img/sby6.d6a3843c.jpg"},411:function(s,t,a){s.exports=a.p+"assets/img/sby7.474c805a.jpg"},441:function(s,t,a){"use strict";a.r(t);var e=a(54),n=Object(e.a)({},(function(){var s=this,t=s.$createElement,e=s._self._c||t;return e("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[e("h1",{attrs:{id:"redis"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#redis"}},[s._v("#")]),s._v(" Redis")]),s._v(" "),e("h2",{attrs:{id:"数据类型"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#数据类型"}},[s._v("#")]),s._v(" 数据类型")]),s._v(" "),e("p",[e("img",{attrs:{src:a(400),alt:"图片"}})]),s._v(" "),e("h2",{attrs:{id:"缓存问题"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#缓存问题"}},[s._v("#")]),s._v(" 缓存问题")]),s._v(" "),e("h3",{attrs:{id:"使用缓存有遇到什么问"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#使用缓存有遇到什么问"}},[s._v("#")]),s._v(" 使用缓存有遇到什么问")]),s._v(" "),e("p",[s._v("在实际项目中使用缓存有遇到什么问题或者会遇到什么问题你知道吗？")]),s._v(" "),e("ul",[e("li",[e("p",[s._v("缓存和数据库数据一致性问题：分布式环境下非常容易出现缓存和数据库间数据一致性问题，针对这一点，如果项目对缓存的要求是强一致性的，那么就不要使用缓存。")])]),s._v(" "),e("li",[e("p",[s._v("我们只能采取合适的策略来降低缓存和数据库间数据不一致的概率，而无法保证两者间的强一致性。")])]),s._v(" "),e("li",[e("p",[s._v("合适的策略包括合适的缓存更新策略，更新数据库后及时更新缓存、缓存失败时增加重试机制。")])])]),s._v(" "),e("h3",{attrs:{id:"缓存雪崩"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#缓存雪崩"}},[s._v("#")]),s._v(" 缓存雪崩")]),s._v(" "),e("p",[s._v("目前电商首页以及热点数据都会去做缓存，一般缓存都是定时任务去刷新，或者查不到之后去更新缓存的，定时任务刷新就有一个问题。")]),s._v(" "),e("p",[s._v("举个栗子：如果首页所有 Key 的失效时间都是 12 小时，中午 12 点刷新的，我零点有个大促活动大量用户涌入，假设每秒 6000 个请求，本来缓存可以抗住每秒 5000 个请求，但是缓存中所有 Key 都失效了。")]),s._v(" "),e("p",[s._v("此时 6000 个/秒的请求全部落在了数据库上，数据库必然扛不住，真实情况可能 DBA 都没反应过来直接挂了。")]),s._v(" "),e("p",[s._v("此时，如果没什么特别的方案来处理，DBA 很着急，重启数据库，但是数据库立马又被新流量给打死了。这就是我理解的缓存雪崩。")]),s._v(" "),e("p",[s._v("**我心想：**同一时间大面积失效，瞬间 Redis 跟没有一样，那这个数量级别的请求直接打到数据库几乎是灾难性的。")]),s._v(" "),e("p",[s._v("你想想如果挂的是一个用户服务的库，那其他依赖他的库所有接口几乎都会报错。")]),s._v(" "),e("p",[s._v("如果没做熔断等策略基本上就是瞬间挂一片的节奏，你怎么重启用户都会把你打挂，等你重启好的时候，用户早睡觉去了，临睡之前，骂骂咧咧“什么垃圾产品”。")]),s._v(" "),e("p",[e("strong",[s._v("怎么应对的？")])]),s._v(" "),e("p",[s._v("**我：**处理缓存雪崩简单，在批量往 Redis 存数据的时候，把每个 Key 的失效时间都加个随机值就好了，这样可以保证数据不会再同一时间大面积失效。")]),s._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("setRedis（key, value, time+Math.random()*10000）;\n")])])]),e("p",[s._v("如果 Redis 是集群部署，将热点数据均匀分布在不同的 Redis 库中也能避免全部失效。")]),s._v(" "),e("p",[s._v("或者设置热点数据永不过期，有更新操作就更新缓存就好了（比如运维更新了首页商品，那你刷下缓存就好了，不要设置过期时间），电商首页的数据也可以用这个操作，保险。")]),s._v(" "),e("h3",{attrs:{id:"缓存穿透"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#缓存穿透"}},[s._v("#")]),s._v(" 缓存穿透")]),s._v(" "),e("blockquote",[e("p",[s._v("那你了解缓存穿透和击穿么，可以说说他们跟雪崩的区别吗？")])]),s._v(" "),e("p",[s._v("先说下缓存穿透吧，缓存穿透是指缓存和数据库中都没有的数据，而用户（黑客）不断发起请求。")]),s._v(" "),e("p",[s._v("举个栗子：我们数据库的 id 都是从 1 自增的，如果发起 id=-1 的数据或者 id 特别大不存在的数据，这样的不断攻击导致数据库压力很大，严重会击垮数据库。")]),s._v(" "),e("p",[s._v("**我又接着说：**至于缓存击穿嘛，这个跟缓存雪崩有点像，但是又有一点不一样，缓存雪崩是因为大面积的缓存失效，打崩了 DB。")]),s._v(" "),e("p",[s._v("而缓存击穿不同的是缓存击穿是指一个 Key 非常热点，在不停地扛着大量的请求，大并发集中对这一个点进行访问，当这个 Key 在失效的瞬间，持续的大并发直接落到了数据库上，就在这个 Key 的点上击穿了缓存。")]),s._v(" "),e("blockquote",[e("p",[s._v("那他们分别怎么解决？")])]),s._v(" "),e("p",[s._v("缓存穿透我会在接口层增加校验，比如用户鉴权，参数做校验，不合法的校验直接 return，比如 id 做基础校验，id<=0 直接拦截。")]),s._v(" "),e("p",[s._v("还可以使用Redis 里还有一个高级用法布隆过滤器（Bloom Filter）这个也能很好的预防缓存穿透的发生。")]),s._v(" "),e("p",[s._v("它的原理也很简单，就是利用高效的数据结构和算法快速判断出你这个 Key 是否在数据库中存在，不存在你 return 就好了，存在你就去查 DB 刷新 KV 再 return。")]),s._v(" "),e("p",[s._v("缓存击穿的话，设置热点数据永不过期，或者加上互斥锁就搞定了。作为暖男，代码给你准备好了，拿走不谢。")]),s._v(" "),e("div",{staticClass:"language-java extra-class"},[e("pre",{pre:!0,attrs:{class:"language-java"}},[e("code",[e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("public")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("static")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("String")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token function"}},[s._v("getData")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),e("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("String")]),s._v(" key"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("throws")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("InterruptedException")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n        "),e("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//从Redis查询数据")]),s._v("\n        "),e("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("String")]),s._v(" result "),e("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token function"}},[s._v("getDataByKV")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("key"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n        "),e("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//参数校验")]),s._v("\n        "),e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("if")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),e("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("StringUtils")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),e("span",{pre:!0,attrs:{class:"token function"}},[s._v("isBlank")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("result"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n            "),e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("try")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n                "),e("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//获得锁")]),s._v("\n                "),e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("if")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("reenLock"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),e("span",{pre:!0,attrs:{class:"token function"}},[s._v("tryLock")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n                    "),e("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//去数据库查询")]),s._v("\n                    result "),e("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token function"}},[s._v("getDataByDB")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("key"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n                    "),e("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//校验")]),s._v("\n                    "),e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("if")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),e("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("StringUtils")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),e("span",{pre:!0,attrs:{class:"token function"}},[s._v("isNotBlank")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("result"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n                        "),e("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//插进缓存")]),s._v("\n                        "),e("span",{pre:!0,attrs:{class:"token function"}},[s._v("setDataToKV")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("key"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" result"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n                    "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n                "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("else")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n                    "),e("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//睡一会再拿")]),s._v("\n                    "),e("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Thread")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),e("span",{pre:!0,attrs:{class:"token function"}},[s._v("sleep")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),e("span",{pre:!0,attrs:{class:"token number"}},[s._v("100L")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n                    result "),e("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token function"}},[s._v("getData")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("key"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n                "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n            "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("finally")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n                "),e("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//释放锁")]),s._v("\n                reenLock"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),e("span",{pre:!0,attrs:{class:"token function"}},[s._v("unlock")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n            "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n        "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n        "),e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("return")]),s._v(" result"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])])]),e("h3",{attrs:{id:"redis-为何这么快"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#redis-为何这么快"}},[s._v("#")]),s._v(" Redis 为何这么快")]),s._v(" "),e("p",[e("strong",[s._v("官方提供的数据可以达到 100000+ 的 QPS（每秒内的查询次数），这个数据不比 Memcached 差！")])]),s._v(" "),e("blockquote",[e("p",[s._v("Redis 这么快，它的“多线程模型”你了解吗？")])]),s._v(" "),e("p",[s._v("Redis 确实是单进程单线程的模型，因为 Redis 完全是基于内存的操作，CPU 不是 Redis 的瓶颈，Redis 的瓶颈最有可能是机器内存的大小或者网络带宽。")]),s._v(" "),e("p",[s._v("既然单线程容易实现，而且 CPU 不会成为瓶颈，那就顺理成章的采用单线程的方案了（毕竟采用多线程会有很多麻烦）。")]),s._v(" "),e("blockquote",[e("p",[s._v("Redis 是单线程的，为什么还能这么快吗？")])]),s._v(" "),e("p",[s._v("总结一下有如下四点：")]),s._v(" "),e("ul",[e("li",[s._v("Redis 完全基于内存，绝大部分请求是纯粹的内存操作，非常迅速，数据存在内存中，类似于 HashMap，HashMap 的优势就是查找和操作的时间复杂度是 O(1)。")]),s._v(" "),e("li",[s._v("数据结构简单，对数据操作也简单。")]),s._v(" "),e("li",[s._v("采用单线程，避免了不必要的上下文切换和竞争条件，不存在多线程导致的 CPU 切换，不用去考虑各种锁的问题，不存在加锁释放锁操作，没有死锁问题导致的性能消耗。")]),s._v(" "),e("li",[s._v("使用多路复用 IO 模型，非阻塞 IO。")])]),s._v(" "),e("h2",{attrs:{id:"redis-和-memcached-的区别"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#redis-和-memcached-的区别"}},[s._v("#")]),s._v(" Redis 和 Memcached 的区别")]),s._v(" "),e("p",[s._v("原因有如下四点：")]),s._v(" "),e("ul",[e("li",[s._v("**存储方式上：**Memcache 会把数据全部存在内存之中，断电后会挂掉，数据不能超过内存大小。Redis 有部分数据存在硬盘上，这样能保证数据的持久性。")]),s._v(" "),e("li",[s._v("**数据支持类型上：**Memcache 对数据类型的支持简单，只支持简单的 key-value，，而 Redis 支持五种数据类型。")]),s._v(" "),e("li",[s._v("**使用底层模型不同：**它们之间底层实现方式以及与客户端之间通信的应用协议不一样。Redis 直接自己构建了 VM 机制，因为一般的系统调用系统函数的话，会浪费一定的时间去移动和请求。")]),s._v(" "),e("li",[s._v("**Value 的大小：**Redis 可以达到 1GB，而 Memcache 只有 1MB。")])]),s._v(" "),e("h2",{attrs:{id:"淘汰策略"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#淘汰策略"}},[s._v("#")]),s._v(" 淘汰策略")]),s._v(" "),e("p",[s._v("有六种淘汰策略，如下图：")]),s._v(" "),e("p",[e("img",{attrs:{src:a(401),alt:"图片"}})]),s._v(" "),e("p",[s._v("**补充一下：**Redis 4.0 加入了 LFU（least frequency use）淘汰策略，包括 volatile-lfu 和 allkeys-lfu，通过统计访问频率，将访问频率最少，即最不经常使用的 KV 淘汰。")]),s._v(" "),e("h2",{attrs:{id:"持久化"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#持久化"}},[s._v("#")]),s._v(" 持久化")]),s._v(" "),e("p",[s._v("Redis 为了保证效率，数据缓存在了内存中，但是会周期性的把更新的数据写入磁盘或者把修改操作写入追加的记录文件中，以保证数据的持久化。")]),s._v(" "),e("p",[s._v("Redis 的持久化策略有两种：")]),s._v(" "),e("ul",[e("li",[s._v("**RDB：**快照形式是直接把内存中的数据保存到一个 dump 的文件中，定时保存，保存策略。")]),s._v(" "),e("li",[s._v("**AOF：**把所有的对 Redis 的服务器进行修改的命令都存到一个文件里，命令的集合。Redis 默认是快照 RDB 的持久化方式。")])]),s._v(" "),e("p",[s._v("当 Redis 重启的时候，它会优先使用 AOF 文件来还原数据集，因为 AOF 文件保存的数据集通常比 RDB 文件所保存的数据集更完整。你甚至可以关闭持久化功能，让数据只在服务器运行时存。")]),s._v(" "),e("h3",{attrs:{id:"rdb"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#rdb"}},[s._v("#")]),s._v(" RDB")]),s._v(" "),e("blockquote",[e("p",[s._v("RDB 是怎么工作的？")])]),s._v(" "),e("p",[s._v('默认 Redis 是会以快照"RDB"的形式将数据持久化到磁盘的一个二进制文件 dump.rdb。')]),s._v(" "),e("p",[s._v("工作原理简单说一下：当 Redis 需要做持久化时，Redis 会 fork 一个子进程，子进程将数据写到磁盘上一个临时 RDB 文件中。")]),s._v(" "),e("p",[s._v("当子进程完成写临时文件后，将原来的 RDB 替换掉，这样的好处是可以 copy-on-write。")]),s._v(" "),e("p",[e("strong",[s._v("RDB 的优点是")]),s._v("：这种文件非常适合用于备份：比如，你可以在最近的 24 小时内，每小时备份一次，并且在每个月的每一天也备份一个 RDB 文件。")]),s._v(" "),e("p",[s._v("这样的话，即使遇上问题，也可以随时将数据集还原到不同的版本。RDB 非常适合灾难恢复。")]),s._v(" "),e("p",[e("strong",[s._v("RDB 的缺点是")]),s._v("：如果你需要尽量避免在服务器故障时丢失数据，那么RDB不合适你。")]),s._v(" "),e("h3",{attrs:{id:"aof"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#aof"}},[s._v("#")]),s._v(" AOF")]),s._v(" "),e("p",[s._v("使用 AOF 做持久化，每一个写命令都通过 write 函数追加到 appendonly.aof 中，配置方式如下：")]),s._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("appendfsync yes   \nappendfsync always     #每次有数据修改发生时都会写入AOF文件。\nappendfsync everysec   #每秒钟同步一次，该策略为AOF的缺省策略。\n")])])]),e("p",[s._v("AOF 可以做到全程持久化，只需要在配置中开启 appendonly yes。这样 Redis 每执行一个修改数据的命令，都会把它添加到 AOF 文件中，当 Redis 重启时，将会读取 AOF 文件进行重放，恢复到 Redis 关闭前的最后时刻。")]),s._v(" "),e("p",[s._v("我顿了一下，继续说：使用 AOF 的优点是会让 Redis 变得非常耐久。可以设置不同的 Fsync 策略，AOF的默认策略是每秒钟 Fsync 一次，在这种配置下，就算发生故障停机，也最多丢失一秒钟的数据。")]),s._v(" "),e("p",[s._v("缺点是对于相同的数据集来说，AOF 的文件体积通常要大于 RDB 文件的体积。根据所使用的 Fsync 策略，AOF 的速度可能会慢于 RDB。")]),s._v(" "),e("h3",{attrs:{id:"如何选择rdb-aof"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#如何选择rdb-aof"}},[s._v("#")]),s._v(" 如何选择RDB/AOF")]),s._v(" "),e("p",[s._v("如果你非常关心你的数据，但仍然可以承受数分钟内的数据丢失，那么可以额只使用 RDB 持久。")]),s._v(" "),e("p",[s._v("AOF 将 Redis 执行的每一条命令追加到磁盘中，处理巨大的写入会降低Redis的性能，不知道你是否可以接受。")]),s._v(" "),e("p",[s._v("数据库备份和灾难恢复：定时生成 RDB 快照非常便于进行数据库备份，并且 RDB 恢复数据集的速度也要比 AOF 恢复的速度快。")]),s._v(" "),e("p",[s._v("当然了，Redis 支持同时开启 RDB 和 AOF，系统重启后，Redis 会优先使用 AOF 来恢复数据，这样丢失的数据会最少。")]),s._v(" "),e("h2",{attrs:{id:"主从复制"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#主从复制"}},[s._v("#")]),s._v(" 主从复制")]),s._v(" "),e("blockquote",[e("p",[s._v("Redis 单节点存在单点故障问题，为了解决单点问题，一般都需要对 Redis 配置从节点，然后使用哨兵来监听主节点的存活状态，如果主节点挂掉，从节点能继续提供缓存功能，你能说说 Redis 主从复制的过程和原理吗？")])]),s._v(" "),e("p",[s._v("主从配置结合哨兵模式能解决单点故障问题，提高 Redis 可用性。")]),s._v(" "),e("p",[s._v("从节点仅提供读操作，主节点提供写操作。对于读多写少的状况，可给主节点配置多个从节点，从而提高响应效率。")]),s._v(" "),e("p",[e("strong",[s._v("关于复制过程，是这样的：")])]),s._v(" "),e("ul",[e("li",[s._v("从节点执行 slaveof[masterIP] [masterPort]，保存主节点信息。")]),s._v(" "),e("li",[s._v("从节点中的定时任务发现主节点信息，建立和主节点的 Socket 连接。")]),s._v(" "),e("li",[s._v("从节点发送 Ping 信号，主节点返回 Pong，两边能互相通信。")]),s._v(" "),e("li",[s._v("连接建立后，主节点将所有数据发送给从节点（数据同步）。")]),s._v(" "),e("li",[s._v("主节点把当前的数据同步给从节点后，便完成了复制的建立过程。接下来，主节点就会持续的把写命令发送给从节点，保证主从数据一致性。")])]),s._v(" "),e("blockquote",[e("p",[s._v("详细说下数据同步的过程吗？")])]),s._v(" "),e("p",[s._v("Redis 2.8 之前使用 sync[runId] [offset] 同步命令，Redis 2.8 之后使用 psync[runId] [offset] 命令。")]),s._v(" "),e("p",[s._v("两者不同在于，Sync 命令仅支持全量复制过程，Psync 支持全量和部分复制。")]),s._v(" "),e("p",[s._v("介绍同步之前，先介绍几个概念：")]),s._v(" "),e("ul",[e("li",[e("p",[s._v("**runId：**每个 Redis 节点启动都会生成唯一的 uuid，每次 Redis 重启后，runId 都会发生变化。")])]),s._v(" "),e("li",[e("p",[s._v("**offset：**主节点和从节点都各自维护自己的主从复制偏移量 offset，当主节点有写入命令时，offset=offset+命令的字节长度。")]),s._v(" "),e("p",[s._v("从节点在收到主节点发送的命令后，也会增加自己的 offset，并把自己的 offset 发送给主节点。")]),s._v(" "),e("p",[s._v("这样，主节点同时保存自己的 offset 和从节点的 offset，通过对比 offset 来判断主从节点数据是否一致。")])]),s._v(" "),e("li",[e("p",[s._v("**repl_backlog_size：**保存在主节点上的一个固定长度的先进先出队列，默认大小是 1MB。")])])]),s._v(" "),e("p",[s._v("主节点发送数据给从节点过程中，主节点还会进行一些写操作，这时候的数据存储在复制缓冲区中。")]),s._v(" "),e("p",[s._v("从节点同步主节点数据完成后，主节点将缓冲区的数据继续发送给从节点，用于部分复制。")]),s._v(" "),e("p",[s._v("主节点响应写命令时，不但会把命名发送给从节点，还会写入复制积压缓冲区，用于复制命令丢失的数据补救。")]),s._v(" "),e("p",[e("img",{attrs:{src:a(402),alt:"图片"}})]),s._v(" "),e("p",[s._v("上面是 Psync 的执行流程，从节点发送 psync[runId][offset] 命令，主节点有三种响应：")]),s._v(" "),e("ul",[e("li",[s._v("**FULLRESYNC：**第一次连接，进行全量复制")]),s._v(" "),e("li",[s._v("**CONTINUE：**进行部分复制")]),s._v(" "),e("li",[s._v("**ERR：**不支持 psync 命令，进行全量复制")])]),s._v(" "),e("blockquote",[e("p",[s._v("全量复制和部分复制的过程吗？")])]),s._v(" "),e("p",[e("img",{attrs:{src:a(403),alt:"图片"}})]),s._v(" "),e("p",[s._v("上面是全量复制的流程。主要有以下几步：")]),s._v(" "),e("ul",[e("li",[s._v("从节点发送 psync ? -1 命令（因为第一次发送，不知道主节点的 runId，所以为?，因为是第一次复制，所以 offset=-1）。")]),s._v(" "),e("li",[s._v("主节点发现从节点是第一次复制，返回 FULLRESYNC {runId} {offset}，runId 是主节点的 runId，offset 是主节点目前的 offset。")]),s._v(" "),e("li",[s._v("从节点接收主节点信息后，保存到 info 中。")]),s._v(" "),e("li",[s._v("主节点在发送 FULLRESYNC 后，启动 bgsave 命令，生成 RDB 文件（数据持久化）。")]),s._v(" "),e("li",[s._v("主节点发送 RDB 文件给从节点。到从节点加载数据完成这段期间主节点的写命令放入缓冲区。")]),s._v(" "),e("li",[s._v("从节点清理自己的数据库数据。")]),s._v(" "),e("li",[s._v("从节点加载 RDB 文件，将数据保存到自己的数据库中。如果从节点开启了 AOF，从节点会异步重写 AOF 文件。")])]),s._v(" "),e("p",[s._v("关于部分复制有以下几点说明：")]),s._v(" "),e("p",[s._v("①部分复制主要是 Redis 针对全量复制的过高开销做出的一种优化措施，使用 psync[runId][offset] 命令实现。")]),s._v(" "),e("p",[s._v("当从节点正在复制主节点时，如果出现网络闪断或者命令丢失等异常情况时，从节点会向主节点要求补发丢失的命令数据，主节点的复制积压缓冲区将这部分数据直接发送给从节点。")]),s._v(" "),e("p",[s._v("这样就可以保持主从节点复制的一致性。补发的这部分数据一般远远小于全量数据。")]),s._v(" "),e("p",[s._v("②主从连接中断期间主节点依然响应命令，但因复制连接中断命令无法发送给从节点，不过主节点内的复制积压缓冲区依然可以保存最近一段时间的写命令数据。")]),s._v(" "),e("p",[s._v("③当主从连接恢复后，由于从节点之前保存了自身已复制的偏移量和主节点的运行 ID。因此会把它们当做 psync 参数发送给主节点，要求进行部分复制。")]),s._v(" "),e("p",[s._v("④主节点接收到 psync 命令后首先核对参数 runId 是否与自身一致，如果一致，说明之前复制的是当前主节点。")]),s._v(" "),e("p",[s._v("之后根据参数 offset 在复制积压缓冲区中查找，如果 offset 之后的数据存在，则对从节点发送+COUTINUE 命令，表示可以进行部分复制。因为缓冲区大小固定，若发生缓冲溢出，则进行全量复制。")]),s._v(" "),e("p",[s._v("⑤主节点根据偏移量把复制积压缓冲区里的数据发送给从节点，保证主从复制进入正常状态。")]),s._v(" "),e("h2",{attrs:{id:"哨兵"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#哨兵"}},[s._v("#")]),s._v(" 哨兵")]),s._v(" "),e("h3",{attrs:{id:"主从复制会存在哪些问题呢"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#主从复制会存在哪些问题呢"}},[s._v("#")]),s._v(" 主从复制会存在哪些问题呢？")]),s._v(" "),e("ul",[e("li",[e("p",[s._v("一旦主节点宕机，从节点晋升为主节点，同时需要修改应用方的主节点地址，还需要命令所有从节点去复制新的主节点，整个过程需要人工干预。")])]),s._v(" "),e("li",[e("p",[s._v("主节点的写能力受到单机的限制。")])]),s._v(" "),e("li",[e("p",[s._v("主节点的存储能力受到单机的限制。")])]),s._v(" "),e("li",[e("p",[s._v("原生复制的弊端在早期的版本中也会比较突出，比如：Redis 复制中断后，从节点会发起 psync。")]),s._v(" "),e("p",[s._v("此时如果同步不成功，则会进行全量同步，主库执行全量备份的同时，可能会造成毫秒或秒级的卡顿。")])])]),s._v(" "),e("p",[s._v("那比较主流的解决方案是什么呢？")]),s._v(" "),e("p",[s._v("使用哨兵。")]),s._v(" "),e("h3",{attrs:{id:"哨兵有哪些功能"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#哨兵有哪些功能"}},[s._v("#")]),s._v(" 哨兵有哪些功能")]),s._v(" "),e("p",[e("img",{attrs:{src:a(404),alt:"图片"}})]),s._v(" "),e("p",[s._v("如图，是 Redis Sentinel（哨兵）的架构图。Redis Sentinel（哨兵）"),e("strong",[s._v("主要功能包括")]),s._v("主节点存活检测、主从运行情况检测、自动故障转移、主从切换。")]),s._v(" "),e("p",[s._v("Redis Sentinel 最小配置是一主一从。Redis 的 Sentinel 系统可以用来管理多个 Redis 服务器。")]),s._v(" "),e("p",[s._v("该系统可以执行以下四个任务：")]),s._v(" "),e("ul",[e("li",[s._v("**监控：**不断检查主服务器和从服务器是否正常运行。")]),s._v(" "),e("li",[s._v("**通知：**当被监控的某个 Redis 服务器出现问题，Sentinel 通过 API 脚本向管理员或者其他应用程序发出通知。")]),s._v(" "),e("li",[s._v("**自动故障转移：**当主节点不能正常工作时，Sentinel 会开始一次自动的故障转移操作，它会将与失效主节点是主从关系的其中一个从节点升级为新的主节点，并且将其他的从节点指向新的主节点，这样人工干预就可以免了。")]),s._v(" "),e("li",[s._v("**配置提供者：**在 Redis Sentinel 模式下，客户端应用在初始化时连接的是 Sentinel 节点集合，从中获取主节点的信息。")])]),s._v(" "),e("h3",{attrs:{id:"哨兵的工作原理"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#哨兵的工作原理"}},[s._v("#")]),s._v(" 哨兵的工作原理")]),s._v(" "),e("p",[e("img",{attrs:{src:a(405),alt:"图片"}})]),s._v(" "),e("p",[s._v("①每个 Sentinel 节点都需要定期执行以下任务：每个 Sentinel 以每秒一次的频率，向它所知的主服务器、从服务器以及其他的 Sentinel 实例发送一个 PING 命令。（如上图）")]),s._v(" "),e("p",[e("img",{attrs:{src:a(406),alt:"图片"}})]),s._v(" "),e("p",[s._v("②如果一个实例距离最后一次有效回复 PING 命令的时间超过 down-after-milliseconds 所指定的值，那么这个实例会被 Sentinel 标记为主观下线。（如上图）")]),s._v(" "),e("p",[e("img",{attrs:{src:a(407),alt:"图片"}})]),s._v(" "),e("p",[s._v("③如果一个主服务器被标记为主观下线，那么正在监视这个服务器的所有 Sentinel 节点，要以每秒一次的频率确认主服务器的确进入了主观下线状态。")]),s._v(" "),e("p",[e("img",{attrs:{src:a(408),alt:"图片"}})]),s._v(" "),e("p",[s._v("④如果一个主服务器被标记为主观下线，并且有足够数量的 Sentinel（至少要达到配置文件指定的数量）在指定的时间范围内同意这一判断，那么这个主服务器被标记为客观下线。")]),s._v(" "),e("p",[e("img",{attrs:{src:a(409),alt:"图片"}})]),s._v(" "),e("p",[s._v("⑤一般情况下，每个 Sentinel 会以每 10 秒一次的频率向它已知的所有主服务器和从服务器发送 INFO 命令。")]),s._v(" "),e("p",[s._v("当一个主服务器被标记为客观下线时，Sentinel 向下线主服务器的所有从服务器发送 INFO 命令的频率，会从 10 秒一次改为每秒一次。")]),s._v(" "),e("p",[e("img",{attrs:{src:a(410),alt:"图片"}})]),s._v(" "),e("p",[s._v("⑥Sentinel 和其他 Sentinel 协商客观下线的主节点的状态，如果处于 SDOWN 状态，则投票自动选出新的主节点，将剩余从节点指向新的主节点进行数据复制。")]),s._v(" "),e("p",[e("img",{attrs:{src:a(411),alt:"图片"}})]),s._v(" "),e("p",[s._v("⑦当没有足够数量的 Sentinel 同意主服务器下线时，主服务器的客观下线状态就会被移除。")]),s._v(" "),e("p",[s._v("当主服务器重新向 Sentinel 的 PING 命令返回有效回复时，主服务器的主观下线状态就会被移除。")]),s._v(" "),e("h2",{attrs:{id:"总结"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#总结"}},[s._v("#")]),s._v(" 总结")]),s._v(" "),e("p",[s._v("本文在一次面试的过程中讲述了 Redis 是什么，Redis 的特点和功能，Redis 缓存的使用，Redis 为什么能这么快，Redis 缓存的淘汰策略，持久化的两种方式，Redis 高可用部分的主从复制和哨兵的基本原理。")])])}),[],!1,null,null,null);t.default=n.exports}}]);